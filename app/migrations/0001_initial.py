# Generated by Django 5.2.4 on 2025-07-11 09:43

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Part',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('part_number', models.CharField(max_length=50, unique=True)),
                ('manufacturer', models.CharField(blank=True, max_length=100)),
                ('cost_price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('selling_price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('quantity_in_stock', models.PositiveIntegerField(default=0)),
                ('minimum_stock', models.PositiveIntegerField(default=5)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'part',
                'verbose_name_plural': 'parts',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'service category',
                'verbose_name_plural': 'service categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('phone', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254, unique=True)),
                ('phone', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$')])),
                ('address', models.TextField(blank=True)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=50)),
                ('zip_code', models.CharField(blank=True, max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('preferred_contact_method', models.CharField(choices=[('phone', 'Phone'), ('email', 'Email')], default='phone', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'customer',
                'verbose_name_plural': 'customers',
                'ordering': ['last_name', 'first_name'],
                'indexes': [models.Index(fields=['last_name', 'first_name'], name='app_custome_last_na_7adf93_idx'), models.Index(fields=['phone'], name='app_custome_phone_1cde69_idx'), models.Index(fields=['email'], name='app_custome_email_0cadac_idx')],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('mechanic', 'Mechanic'), ('receptionist', 'Receptionist'), ('inventory', 'Inventory Manager')], default='mechanic', max_length=20)),
                ('hire_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('specialization', models.CharField(blank=True, max_length=100)),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('bio', models.TextField(blank=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'profile',
                'verbose_name_plural': 'profiles',
                'ordering': ['user__last_name', 'user__first_name'],
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('content', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_pages', to='app.profile')),
                ('last_updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_pages', to='app.profile')),
            ],
            options={
                'verbose_name': 'page',
                'verbose_name_plural': 'pages',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='DefinedService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('base_price', models.DecimalField(decimal_places=2, help_text='Base service price in local currency', max_digits=8)),
                ('estimated_duration', models.PositiveIntegerField(help_text='Estimated time to complete the service in minutes')),
                ('is_active', models.BooleanField(default=True)),
                ('requires_approval', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='services', to='app.servicecategory')),
            ],
            options={
                'verbose_name': 'defined service',
                'verbose_name_plural': 'defined services',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ServiceTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('waiting_parts', 'Waiting for Parts'), ('waiting_approval', 'Waiting for Approval'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='open', max_length=20)),
                ('problem_description', models.TextField()),
                ('customer_notes', models.TextField(blank=True)),
                ('internal_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('estimated_completion', models.DateTimeField(blank=True, null=True)),
                ('priority', models.PositiveSmallIntegerField(choices=[(1, 'Low'), (2, 'Medium'), (3, 'High')], default=2)),
                ('mechanic', models.ForeignKey(blank=True, limit_choices_to={'role': 'mechanic'}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='assigned_tickets', to='app.profile')),
                ('receptionist', models.ForeignKey(limit_choices_to={'role': 'receptionist'}, on_delete=django.db.models.deletion.PROTECT, related_name='created_tickets', to='app.profile')),
            ],
            options={
                'verbose_name': 'service ticket',
                'verbose_name_plural': 'service tickets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PartUsed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('price_per_unit', models.DecimalField(decimal_places=2, max_digits=8)),
                ('notes', models.TextField(blank=True)),
                ('part', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='used_in_tickets', to='app.part')),
                ('service_ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parts_used', to='app.serviceticket')),
            ],
            options={
                'verbose_name': 'part used',
                'verbose_name_plural': 'parts used',
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('make', models.CharField(max_length=50)),
                ('model', models.CharField(max_length=50)),
                ('year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2026)])),
                ('license_plate', models.CharField(max_length=20, unique=True, validators=[django.core.validators.MinLengthValidator(3)])),
                ('vin', models.CharField(blank=True, help_text='Vehicle Identification Number', max_length=17, validators=[django.core.validators.MinLengthValidator(17)])),
                ('color', models.CharField(blank=True, max_length=30)),
                ('vehicle_type', models.CharField(choices=[('car', 'Car'), ('truck', 'Truck'), ('suv', 'SUV'), ('van', 'Van'), ('motorcycle', 'Motorcycle'), ('other', 'Other')], default='car', max_length=20)),
                ('mileage', models.PositiveIntegerField(blank=True, null=True)),
                ('last_service_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicles', to='app.customer')),
            ],
            options={
                'verbose_name': 'vehicle',
                'verbose_name_plural': 'vehicles',
                'ordering': ['make', 'model'],
            },
        ),
        migrations.AddField(
            model_name='serviceticket',
            name='vehicle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_tickets', to='app.vehicle'),
        ),
        migrations.AddField(
            model_name='part',
            name='compatible_vehicles',
            field=models.ManyToManyField(blank=True, related_name='compatible_parts', to='app.vehicle'),
        ),
        migrations.CreateModel(
            name='ServiceOffered',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('actual_price', models.DecimalField(blank=True, decimal_places=2, help_text='Final price charged to customer', max_digits=8, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='offered_services', to='app.definedservice')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services_offered', to='app.serviceticket')),
            ],
            options={
                'verbose_name': 'service offered',
                'verbose_name_plural': 'services offered',
                'ordering': ['-created_at'],
                'unique_together': {('ticket', 'service')},
            },
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['license_plate'], name='app_vehicle_license_b1dcd1_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['make', 'model'], name='app_vehicle_make_c97c81_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['customer'], name='app_vehicle_custome_d0f759_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['vin'], name='app_vehicle_vin_7f45fe_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceticket',
            index=models.Index(fields=['status'], name='app_service_status_576247_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceticket',
            index=models.Index(fields=['vehicle'], name='app_service_vehicle_3462e2_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceticket',
            index=models.Index(fields=['receptionist'], name='app_service_recepti_5d0b9a_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceticket',
            index=models.Index(fields=['mechanic'], name='app_service_mechani_9e965b_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceticket',
            index=models.Index(fields=['created_at'], name='app_service_created_8a800e_idx'),
        ),
    ]
